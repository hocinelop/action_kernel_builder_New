name: Build Kernel

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE:
        description: 'Kernel source URL'
        required: true
        default: 'https://github.com/surya-aosp/kernel_xiaomi_surya'
      KERNEL_BRANCH:
        description: 'Kernel branch'
        required: true
        default: 'lineage-22.1-ksu'
      KERNEL_NAME:
        description: 'Kernel/zip name'
        required: true
        default: 'hoc'
      CONFIG_FILE:
        description: 'Config file (You can put multiple configs separated by space)'
        required: true
        default: 'surya_defconfig'
      TOOLCHAIN_URL:
        description: "Clone URL of your toolchain"
        required: true
        default: 'https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/tags/android-15.0.0_r1/clang-r522817.tar.gz'
      ANYKERNEL:
        description: "Clone URL of your AnyKernel"
        required: true
        default: 'https://github.com/aosp-realm/AnyKernel3.git -b master'

jobs:
  Build_Kernel:
    runs-on: ubuntu-latest
    permissions: write-all
    defaults:
      run:
       shell: bash
       working-directory: ${{ github.workspace }}

    steps:
      - name: Set-up environment
        run: |
          rm -rf ${{ github.workspace }}/*
          sudo apt-get update
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache python-is-python3
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar cpio jq device-tree-compiler
          
      - name: Cloning Kernel Source
        run: |
          git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_BRANCH }} ${{ github.workspace }}/kernel
          
      - name: Set-up Toolchain
        run: |
         mkdir -p ${{ github.workspace }}/toolchain
         if [[ "${{ github.event.inputs.TOOLCHAIN_URL }}" == *.tar.gz ]]; then
             wget -O clang-toolchain.tar.gz "${{ github.event.inputs.TOOLCHAIN_URL }}"
             tar -xzf clang-toolchain.tar.gz -C ${{ github.workspace }}/toolchain
             rm -f clang-toolchain.tar.gz
         else
             git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.TOOLCHAIN_URL }} ${{ github.workspace }}/toolchain
         fi

      - name: Set environment variables
        run: |
          echo "OBJDIR=${{ github.workspace }}/kernel/out" >> $GITHUB_ENV
          echo "ANYKERNEL=${{ github.workspace }}/anykernel" >> $GITHUB_ENV
          echo "CLANG_DIR=${{ github.workspace }}/toolchain" >> $GITHUB_ENV
          echo "KERNEL_NAME=${{ github.event.inputs.KERNEL_NAME }}" >> $GITHUB_ENV
          echo "ZIP_NAME=${{ github.event.inputs.KERNEL_NAME }}-$(date +"%d%m%Y").zip" >> $GITHUB_ENV
          echo "OUTPUT_DIR=${{ github.workspace }}/compiled" >> $GITHUB_ENV
          cd ${{ github.workspace }}/kernel && echo "COMMIT_ID=$(git rev-parse HEAD)" >> $GITHUB_ENV

          KERNEL_SOURCE_URL="${{ github.event.inputs.KERNEL_SOURCE }}"
          if [[ "${KERNEL_SOURCE_URL}" == *.git ]]; then
            KERNEL_SOURCE_URL="${KERNEL_SOURCE_URL%.git}"
          fi
          echo "KERNEL_SOURCE_URL=${KERNEL_SOURCE_URL}" >> $GITHUB_ENV
         
      - name: Start Compilation
        run: |
         mkdir -p ${{ env.OUTPUT_DIR }}
         cd ${{ github.workspace }}/kernel
         
         export PATH="${{ env.CLANG_DIR }}/bin:$PATH"
         
         make_defconfig() {
            start=$(date +"%s")
            make -s ARCH=arm64 O=${{ env.OBJDIR }} ${{ github.event.inputs.CONFIG_FILE }} -j$(nproc --all)
         }
         wget https://raw.githubusercontent.com/hocinelop/Ker-action/refs/heads/main/tests/susfs.sh -O s.sh
         bash s.sh arch/arm64/configs/surya_defconfig
         wget https://raw.githubusercontent.com/hocinelop/action_kernel_builder_New/refs/heads/main/sysctl.c
         mv sysctl.c kernel/sysctl.c
         compile() {       
            make -j$(nproc --all) \
            O=${{ env.OBJDIR }} \
            ARCH=arm64 \
            CC=clang \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
            CROSS_COMPILE_COMPAT=arm-linux-gnueabi- \
            AR=llvm-ar \
            LLVM_NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            LD=ld.lld \
            NM=llvm-nm \
            LLVM=1 \
            LLVM_IAS=1 \
            DTC_EXT=dtc Image.gz dtbo.img dtb.img
         }

         make_defconfig
         compile

         end=$(date +"%s")
         diff=$((end - start))
         echo -e "BUILD COMPLETED IN ${diff} SECONDS"

        continue-on-error: false
         
      - name: Checking for outputs
        run: |
         compiled_gz_image="arch/arm64/boot/Image.gz"
         compiled_dtb="arch/arm64/boot/dtb.img"
         compiled_dtbo="arch/arm64/boot/dtbo.img"
         zip -r "${{ env.ZIP_NAME }}".zip compiled_gz_image compiled_dtb compiled_dtbo

      - name: Upload files to repository releases page
        uses: softprops/action-gh-release@v1
        with:
          files: |
            "${{ env.ZIP_NAME }}".zip
          name: ${{ github.event.inputs.KERNEL_NAME }} // ${{ env.RELEASE_DATE }}
          tag_name: ${{ github.run_id }}
          body: |
            [Kernel Source](${{ env.KERNEL_SOURCE_URL }}/tree/${{ github.event.inputs.KERNEL_BRANCH }})
            [Latest Commit](${{ env.KERNEL_SOURCE_URL }}/commit/${{ env.COMMIT_ID }}) at the time of building.
